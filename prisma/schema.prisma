generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Image {
  id          String    @id @default(cuid())
  pathname    String
  url         String
  contentType String
  scheduledAt DateTime?
  frame       Frame?    @relation(fields: [frameId], references: [id])
  frameId     String?
}

model Frame {
  id          String       @id @default(cuid())
  name        String?
  description String?
  endpointId  String
  username    String
  password    String
  variant     FrameVariant @default(SIX_INCH_HD)
  orientation Orientation  @default(LANDSCAPE)
  owner       User?        @relation(fields: [ownerId], references: [id])
  ownerId     String?      @map("ownerId")
  images      Image[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  frame         Frame[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Orientation {
  LANDSCAPE
  PORTRAIT
}

enum FrameVariant {
  SIX_INCH_HD
  NINE_POINT_SEVEN_INCH
  THIRTEEN_POINT_THREE_INCH
  THIRTYONE_POINT_TWO_INCH
}
